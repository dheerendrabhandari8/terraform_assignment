---
- name: Setup Docker, Minikube, Build & Deploy Kubernetes App
  hosts: all
  become: true

  vars:
    minikube_bin_path: "/usr/local/bin/minikube"
    kubectl_bin_path: "/usr/local/bin/kubectl"
    helm_bin_path: "/usr/local/bin/helm"
    minikube_url: "https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64"
    helm_url: "https://get.helm.sh/helm-v3.14.4-linux-amd64.tar.gz"
    docker_user: "ubuntu"
    docker_repo: "dheerendrabhandari/nodejsapp" # <-- Change if needed
    docker_app_repo: "https://github.com/dheerendrabhandari8/terraform_assignment.git"
    docker_app_dir: "/home/ubuntu/terraform_assignment"
    dockerfile_dir: "dockerfile"  # relative to app dir
    dockerfile_name: "Dockerfile"
    test_app_service_port: 3000

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install base dependencies (including git)
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - wget
          - git
        state: present

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Install Docker
      apt:
        name: docker.io
        state: present

    - name: Ensure Docker is started and enabled
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Ensure docker group exists
      group:
        name: docker
        state: present

    - name: Add user to docker group
      user:
        name: "{{ docker_user }}"
        groups: docker
        append: yes

    - name: Restart Docker to ensure group change takes effect
      systemd:
        name: docker
        state: restarted
        enabled: true

    - name: Verify docker access for {{ docker_user }}
      become: true
      become_user: "{{ docker_user }}"
      shell: docker version
      register: docker_check
      failed_when: docker_check.rc != 0

    - name: Download Minikube binary
      get_url:
        url: "{{ minikube_url }}"
        dest: /tmp/minikube-linux-amd64
        mode: '0755'

    - name: Move Minikube binary to /usr/local/bin
      copy:
        src: /tmp/minikube-linux-amd64
        dest: "{{ minikube_bin_path }}"
        remote_src: yes
        mode: '0755'

    - name: Get latest stable kubectl version
      shell: "curl -L -s https://dl.k8s.io/release/stable.txt"
      register: kubectl_version

    - name: Download kubectl binary
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version.stdout }}/bin/linux/amd64/kubectl"
        dest: /tmp/kubectl
        mode: '0755'

    - name: Move kubectl binary to /usr/local/bin
      copy:
        src: /tmp/kubectl
        dest: "{{ kubectl_bin_path }}"
        remote_src: yes
        mode: '0755'

    # Install Helm
    - name: Download Helm
      get_url:
        url: "{{ helm_url }}"
        dest: /tmp/helm-linux-amd64.tar.gz
        mode: '0644'

    - name: Extract Helm binary
      unarchive:
        src: /tmp/helm-linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes
        creates: /tmp/linux-amd64/helm

    - name: Move Helm binary to /usr/local/bin
      copy:
        src: /tmp/linux-amd64/helm
        dest: "{{ helm_bin_path }}"
        remote_src: yes
        mode: '0755'

    # Clone the app repo and build/push Docker image
    - name: Clone app repo
      become: true
      become_user: "{{ docker_user }}"
      git:
        repo: "{{ docker_app_repo }}"
        dest: "{{ docker_app_dir }}"
        update: yes

    - name: Log in to Docker Hub
      become: true
      become_user: "{{ docker_user }}"
      shell: echo "{{ lookup('env','DOCKER_PASSWORD') }}" | docker login --username "{{ lookup('env','DOCKER_USERNAME') }}" --password-stdin
      environment:
        DOCKER_USERNAME: "{{ lookup('env','DOCKER_USERNAME') }}"
        DOCKER_PASSWORD: "{{ lookup('env','DOCKER_PASSWORD') }}"
      no_log: true

    - name: Build Docker image using Dockerfile in {{ dockerfile_dir }}
      become: true
      become_user: "{{ docker_user }}"
      shell: docker build -t {{ docker_repo }}:latest -f {{ dockerfile_dir }}/{{ dockerfile_name }} .
      args:
        chdir: "{{ docker_app_dir }}"

    - name: Push Docker image to Docker Hub
      become: true
      become_user: "{{ docker_user }}"
      shell: docker push {{ docker_repo }}:latest

    # Minikube Start and Deployments
    - name: Start Minikube
      become: true
      become_user: "{{ docker_user }}"
      shell: minikube start
      environment:
        CHANGE_MINIKUBE_NONE_USER: "true"
      args:
        creates: /home/{{ docker_user }}/.minikube

    - name: Wait for Minikube to be ready
      become: true
      become_user: "{{ docker_user }}"
      shell: minikube status | grep -q Running

    # Apply Kubernetes manifests (deploy, svc, ingress) from app repo
    - name: Deploy app with kubectl
      become: true
      become_user: "{{ docker_user }}"
      shell: kubectl apply -f k8s/
      args:
        chdir: "{{ docker_app_dir }}"
      ignore_errors: true

    - name: Deploy Ingress controller (using Helm)
      become: true
      become_user: "{{ docker_user }}"
      shell: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx
      ignore_errors: true

    - name: Expose test-app-deployment as NodePort service
      become: true
      become_user: "{{ docker_user }}"
      shell: kubectl expose deployment test-app-deployment --type=NodePort --name=test-app-service
      args:
        creates: /tmp/test-app-service-exposed
      ignore_errors: true

    - name: Get test-app-service URL
      become: true
      become_user: "{{ docker_user }}"
      shell: minikube service test-app-service --url
      register: service_url
      ignore_errors: true

    - name: Port forward test-app-service to localhost:3000
      become: true
      become_user: "{{ docker_user }}"
      shell: "nohup kubectl port-forward svc/test-app-service {{ test_app_service_port }}:{{ test_app_service_port }} --address 0.0.0.0 &"
      async: 10
      poll: 0
      ignore_errors: true

    - name: Rollout restart test-app-deployment
      become: true
      become_user: "{{ docker_user }}"
      shell: kubectl rollout restart deployment test-app-deployment
      register: rollout_restart
      ignore_errors: true

    - name: Show test-app-service URL
      debug:
        msg: "App accessible at: {{ service_url.stdout | default('Check manually with minikube service test-app-service --url') }}"
