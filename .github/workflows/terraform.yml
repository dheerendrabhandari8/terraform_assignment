name: Provision Infrastructure with Terraform and Deploy

on:
  push:
    paths:
      - '**/*.tf'
      - '**/terraform.yml'
      - '**/terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action: apply or destroy'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'ap-south-1' }}
    outputs:
      server_ip: ${{ steps.output.outputs.SERVER_IP }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve

      - name: Output public IP
        id: output
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: |
          echo "SERVER_IP=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT

      - name: Save public IP as artifact
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: echo "${{ steps.output.outputs.SERVER_IP }}" > server_ip.txt

      - name: Upload server IP artifact
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        uses: actions/upload-artifact@v4
        with:
          name: server-ip
          path: server_ip.txt

  ansible:
    needs: terraform
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Setup SSH for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          SERVER_IP="${{ needs.terraform.outputs.server_ip }}"
          if [ -z "$SERVER_IP" ]; then
            echo "ERROR: SERVER_IP is empty. Exiting."
            exit 1
          fi
          ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i "${{ needs.terraform.outputs.server_ip }}," ansible-playbook.yml -u ubuntu --private-key ~/.ssh/id_rsa

  docker_k8s_deploy:
    needs: ansible
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    runs-on: ubuntu-latest
    steps:
      - name: Download server-ip artifact
        uses: actions/download-artifact@v4
        with:
          name: server-ip

      - name: Read server IP
        id: serverip
        run: |
          SERVER_IP=$(cat server_ip.txt)
          echo "SERVER_IP=$SERVER_IP" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH for Docker/K8s deploy
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          SERVER_IP="${{ steps.serverip.outputs.SERVER_IP }}"
          if [ -z "$SERVER_IP" ]; then
            echo "ERROR: SERVER_IP is empty. Exiting."
            exit 1
          fi
          ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts

      - name: Clone App Repo on remote
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.serverip.outputs.SERVER_IP }} "\
            git clone https://github.com/dheerendrabhandari8/terraform_assignment.git /home/ubuntu/terraform_assignment || true"

      - name: Docker login on remote
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.serverip.outputs.SERVER_IP }} "\
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin"

      - name: Build & Push Docker image on remote
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.serverip.outputs.SERVER_IP }} "\
            docker build -t dheerendrabhandari/nodejsapp:latest -f /home/ubuntu/terraform_assignment/dockerfile/Dockerfile /home/ubuntu/terraform_assignment/dockerfile && \
            docker push dheerendrabhandari/nodejsapp:latest"

      - name: Start Minikube on remote
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.serverip.outputs.SERVER_IP }} "\
            minikube start --driver=docker || true"

      - name: Deploy ingress-nginx controller (Helm)
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.serverip.outputs.SERVER_IP }} "\
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx && \
            helm repo update && \
            helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx"

      - name: Apply Kubernetes manifests in order
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.serverip.outputs.SERVER_IP }} "\
            kubectl apply -f /home/ubuntu/terraform_assignment/ingress.yaml && \
            kubectl apply -f /home/ubuntu/terraform_assignment/deployment.yaml && \
            kubectl apply -f /home/ubuntu/terraform_assignment/service.yaml"

      - name: Expose test-app-deployment as NodePort service
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.serverip.outputs.SERVER_IP }} "\
            kubectl expose deployment test-app-deployment --type=NodePort --name=test-app-service || true"

      - name: Port forward test-app-service to localhost:3000
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.serverip.outputs.SERVER_IP }} "\
            nohup kubectl port-forward svc/test-app-service 3000:3000 --address 0.0.0.0 &"

