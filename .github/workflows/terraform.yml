name: Infra & App Deploy Pipeline

on:
  push:
    paths:
      - '**/*.tf'
      - '**/terraform.yml'
      - '**/terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action: apply or destroy'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'ap-south-1' }}

    outputs:
      server_ip: ${{ steps.output.outputs.SERVER_IP }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.action == 'apply'
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve

      - name: Output public IP
        if: github.event.inputs.action != 'destroy'
        id: output
        run: |
          echo "SERVER_IP=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT

  ansible:
    needs: terraform
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action != 'destroy' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.terraform.outputs.server_ip }} >> ~/.ssh/known_hosts

      - name: Run Ansible Install Playbook
        run: |
          ansible-playbook -i "${{ needs.terraform.outputs.server_ip }}," ansible-playbook.yml -u ubuntu --private-key ~/.ssh/id_rsa

  deploy:
    needs: ansible
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action != 'destroy' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.terraform.outputs.server_ip }} >> ~/.ssh/known_hosts

      - name: Clone App Repo on remote
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.terraform.outputs.server_ip }} "\
            git clone https://github.com/dheerendrabhandari8/terraform_assignment.git /home/ubuntu/terraform_assignment || true"

      - name: Docker login on remote
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.terraform.outputs.server_ip }} "\
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin"

      - name: Build & Push Docker image on remote
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.terraform.outputs.server_ip }} "\
            cd /home/ubuntu/terraform_assignment && \
            docker build -t dheerendrabhandari/nodejsapp:latest -f dockerfile/Dockerfile . && \
            docker push dheerendrabhandari/nodejsapp:latest"

      - name: Start Minikube on remote
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.terraform.outputs.server_ip }} "\
            minikube start --driver=docker || true"

      - name: Deploy Kubernetes manifests
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.terraform.outputs.server_ip }} "\
            cd /home/ubuntu/terraform_assignment && \
            kubectl apply -f k8s/"

      - name: Deploy Ingress controller
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.terraform.outputs.server_ip }} "\
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx && \
            helm repo update && \
            helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx"

      - name: Expose test-app-deployment as NodePort service
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.terraform.outputs.server_ip }} "\
            kubectl expose deployment test-app-deployment --type=NodePort --name=test-app-service || true"

      - name: Get test-app-service URL
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.terraform.outputs.server_ip }} "\
            minikube service test-app-service --url || true"

      - name: Port forward test-app-service to localhost:3000
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ needs.terraform.outputs.server_ip }} "\
            nohup kubectl port-forward svc/test-app-service 3000:3000 --address 0.0.0.0 &"

